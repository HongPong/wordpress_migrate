<?php

/**
 * @file
 * WordPress migration module installation
 */

function a_wordpress_migrate_schema() {
  $schema = array();
  $schema['wordpress_migrate'] = wordpress_migrate_schema_wordpress();
  $schema['wordpress_migrate_attachment'] = wordpress_migrate_schema_attachment();
  $schema['wordpress_migrate_linked_authors'] = wordpress_migrate_schema_linked_authors();
  return $schema;
}

function a_wordpress_migrate_schema_wordpress() {
  return array(
    'description' => 'Mapping of machine name to filename for WordPress migrations',
    'fields' => array(
      'blog_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Unique blog ID',
      ),
      'filename' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Filename of XML imported by this migration',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Blog title (used to seed machine name)',
      ),
      'blog_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Original blog URL',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Link value from XML',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User ID of the account initiating the import",
      ),
      'wxr_version' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '1.1',
        'description' => 'WXR version of the imported file',
      ),
    ),
    'primary key' => array('blog_id'),
    'unique keys' => array(
      'blog_url' => array('blog_url'),
    ),
  );
}

function a_wordpress_migrate_schema_attachment() {
  return array(
    'description' => 'Map original attachment URL to Drupal URI',
    'fields' => array(
      'blog_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'ID of parent blog',
      ),
      'original_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URL of attachment on WordPress',
      ),
      'new_uri' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URI of attachment on Drupal',
      ),
      'new_fid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'File ID of the attachment',
      ),
      'parent_nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Drupal ID of the node this is attached to',
      ),
    ),
    'primary key' => array('blog_id', 'original_url'),
  );
}

function a_wordpress_migrate_schema_linked_authors() {
  return array(
    'description' => 'Track pre-existing user accounts',
    'fields' => array(
      'mail' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Email address of user account already in Drupal',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User ID of the account in Drupal",
      ),
    ),
    'primary key' => array('mail'),
  );
}

/**
 * Implements hook_requirements().
 *
 * @param $phase
 *
 * @return array
 */
function a_wordpress_migrate_requirements($phase) {
  $requirements = array();
  $t = get_t();
  // Make sure the XMLReader extension is available.
  if (!extension_loaded('xmlreader')) {
    $requirements['wordpress_migrate_xmlreader']['severity'] = REQUIREMENT_ERROR;
    $requirements['wordpress_migrate_xmlreader']['title'] = $t('XMLReader extension');
    $requirements['wordpress_migrate_xmlreader']['description'] =
      $t('WordPress Migrate requires the PHP XMLReader extension.');
  }

  if (!function_exists('curl_init')) {
    $requirements['wordpress_migrate_curl'] = array(
      'title' => $t('cURL'),
      'value' => $t('Not found'),
      'severity' => REQUIREMENT_ERROR,
    );
    $requirements['wordpress_migrate_curl']['description'] = $t('Wordpress Migrate requires the <a href="@curl_url">php cURL extension</a>.',
      array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
  }

  return $requirements;
}

/**
 * Implements hook_update_dependencies().
 */
function a_wordpress_migrate_update_dependencies() {
  // Make sure migrate_ui uses our drush variables before we delete them.
  $dependencies['wordpress_migrate'][7012] = array('migrate_ui' => 7202);

  // Migrate must set up the new group support before we can reference it.
  $dependencies['wordpress_migrate'][7013] = array('migrate' => 7203);
  return $dependencies;
}
