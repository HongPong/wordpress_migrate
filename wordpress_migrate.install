<?php

/**
 * @file
 * WordPress migration module installation
 */

function wordpress_migrate_schema() {
  $schema = array();
  $schema['wordpress_migrate'] = wordpress_migrate_schema_wordpress();
  $schema['wordpress_migrate_attachment'] = wordpress_migrate_schema_attachment();
  $schema['wordpress_migrate_linked_authors'] = wordpress_migrate_schema_linked_authors();
  return $schema;
}

function wordpress_migrate_schema_wordpress() {
  return array(
    'description' => 'Mapping of machine name to filename for WordPress migrations',
    'fields' => array(
      'filename' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Filename of XML imported by this migration',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Blog title (used to seed machine name)',
      ),
      'blog_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Original blog URL',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Link value from XML',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User ID of the account initiating the import",
      ),
      'wxr_version' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '1.1',
        'description' => 'WXR version of the imported file',
      ),
    ),
    'primary key' => array('filename'),
  );
}

function wordpress_migrate_schema_attachment() {
  return array(
    'description' => 'Map original attachment URL to Drupal URI',
    'fields' => array(
      'filename' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Filename of XML imported by this migration',
      ),
      'original_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URL of attachment on WordPress',
      ),
      'new_uri' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URI of attachment on Drupal',
      ),
    ),
    'primary key' => array('filename', 'original_url'),
  );
}

function wordpress_migrate_schema_linked_authors() {
  return array(
    'description' => 'Track pre-existing user accounts',
    'fields' => array(
      'mail' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Email address of user account already in Drupal',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User ID of the account in Drupal",
      ),
    ),
    'primary key' => array('mail'),
  );
}

/**
 * Add uid field to wordpress_migrate table.
 */
function wordpress_migrate_update_7001() {
  db_add_field('wordpress_migrate', 'uid', array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User ID of the account initiating the import",
      )
  );

  return t('Added uid column to wordpress_migrate table');
}

/**
 * Add the wordpress_migrate_attachment table.
 */
function wordpress_migrate_update_7002() {
  db_create_table('wordpress_migrate_attachment', wordpress_migrate_schema_attachment());
  return t('Added the wordpress_migrate_attachment table');
}

/**
 * Add blog_url field to wordpress_migrate table.
 */
function wordpress_migrate_update_7003() {
  $ret = array();
  db_add_field('wordpress_migrate', 'blog_url', array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Original blog URL',
      )
  );

  return t('Added blog_url column to wordpress_migrate table');
}

/**
 * Add link field to wordpress_migrate table.
 */
function wordpress_migrate_update_7004() {
  if (!db_field_exists('wordpress_migrate', 'link')) {
    db_add_field('wordpress_migrate', 'link', array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'Link value from XML',
        )
    );
  }

  return t('Added link column to wordpress_migrate table');
}

/**
 * Fix any malformed YouTube embeds.
 */
function wordpress_migrate_update_7005() {
  $results = db_select('file_managed', 'f')
    ->fields('f', array('fid', 'uri'))
    ->condition(db_or()
      ->condition('f.uri', 'youtube://%?%', 'LIKE')
      ->condition('f.uri', 'youtube://%&%', 'LIKE')
    )
    ->execute();
  foreach ($results as $result) {
    $original = $result->uri;
    preg_match('@(youtube://[^\?\&]+)@i', $result->uri, $matches);
    $result->uri = $matches[1];
    list(,,,$result->filename) = explode('/', $result->uri);
    $check_for_duplicates = db_select('file_managed', 'f')
      ->fields('f', array('fid', 'uri'))
      ->condition('f.uri', $result->uri)
      ->execute()
      ->fetchObject();
    if (!$check_for_duplicates) {
      drupal_write_record('file_managed', $result, 'fid');
    }
    else {
      // The uri column is unique. Throw an error, but run through the rest first.
      if (!isset($errors)) {
        $errors = array($original, $result, $check_for_duplicates);
      }
    }
  }
  if (isset($errors)) {
    throw new DrupalUpdateException(t('Unable to fix uri: @media_1 (fid: @fid_1), as it conflicts with uri: @media_2 (fid: @fid_2).', array('@media_1' => $errors[0], '@media_2' => $errors[2]->uri, '@fid_1' => $errors[1]->fid, '@fid_2' => $errors[2]->fid)));
  }
  return t('Fixed all malformed YouTube embeds.');
}

/**
 * Add the wordpress_migrate_attachment table and wxr_version column..
 */
function wordpress_migrate_update_7006() {
  if (!db_field_exists('wordpress_migrate', 'wxr_version')) {
    db_add_field('wordpress_migrate', 'wxr_version', array(
                      'type' => 'varchar',
                      'length' => 10,
                      'not null' => TRUE,
                      'default' => '1.1',
                      'description' => 'WXR version of the imported file',
        )
    );
  }
  if (!db_table_exists('wordpress_migrate_linked_authors')) {
    db_create_table('wordpress_migrate_linked_authors',
                    wordpress_migrate_schema_linked_authors());
  }
  return t('Added the wordpress_migrate_linked_authors table and wxr_version column');
}
